syntax = "proto3";

package article;
option go_package = "article/pb";

// やり取りする広告の型定義
message Article {
    int64 id = 1;
    string display_app_name = 2;
    string icon_src = 3;
    string cv_condition = 4;
    int64 base_point = 5;
}

// CREATEとUPDATEにおける入力のための型
message ArticleInput {
    string display_app_name = 1;
    string icon_src = 2;
    string cv_condition = 3;
    int64 base_point = 4;
}

// CREATEする広告の内容(display_app_name, icon_src, cv_condition,)を受け取る
message CreateArticleRequest {
    ArticleInput articleInput = 1;
}

// CREATEした広告を返す
message CreateArticleResponse {
    Article article = 1;
}

// READする広告のIDを受け取る
message ReadArticleRequest {
    int64 id = 1;
}

// 該当するIDの広告を返す
message ReadArticleResponse {
    Article article = 1;
}

// UPDATEする広告のIDと変更内容を受け取る
message UpdateArticleRequest {
    int64 id = 1;
    ArticleInput articleInput = 2;
}

// UPDATEした広告を返す 
message UpdateArticleResponse {
    Article article = 1;
}

// DELETEする広告のIDを受け取る
message DeleteArticleResponse {
    int64 id = 1;
}

// DELETEした広告のIDを返す
message DeleteArticleRequest {
    int64 id = 1;
}

// 全取得の際、入力は無し
message ListArticleRequest {

}

// 全取得した広告を１つずつ返すので、配列(repeated)の形ではなくArticle1つを返す形
message ListArticleResponse {
    Article article = 1;
}

// articleサービスを定義
service ArticleService {
    rpc CreateArticle(CreateArticleRequest) returns(CreateArticleResponse);
    rpc ReadArticle(ReadArticleRequest) returns(ReadArticleResponse);
    rpc UpdateArticle(UpdateArticleRequest) returns(UpdateArticleResponse);
    rpc DeleteArticle(DeleteArticleRequest) returns(DeleteArticleResponse);
    rpc ListArticle(ListArticleRequest) returns(stream ListArticleResponse);
}